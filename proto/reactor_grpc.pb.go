// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: reactor.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReactorService_ReactorLoop_FullMethodName = "/proto.ReactorService/ReactorLoop"
	ReactorService_ReactorWork_FullMethodName = "/proto.ReactorService/ReactorWork"
)

// ReactorServiceClient is the client API for ReactorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReactorServiceClient interface {
	ReactorLoop(ctx context.Context, in *ReactorStart, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReactorActivation], error)
	ReactorWork(ctx context.Context, in *ReactorUpdate, opts ...grpc.CallOption) (*Nothing, error)
}

type reactorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReactorServiceClient(cc grpc.ClientConnInterface) ReactorServiceClient {
	return &reactorServiceClient{cc}
}

func (c *reactorServiceClient) ReactorLoop(ctx context.Context, in *ReactorStart, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReactorActivation], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReactorService_ServiceDesc.Streams[0], ReactorService_ReactorLoop_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReactorStart, ReactorActivation]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReactorService_ReactorLoopClient = grpc.ServerStreamingClient[ReactorActivation]

func (c *reactorServiceClient) ReactorWork(ctx context.Context, in *ReactorUpdate, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, ReactorService_ReactorWork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReactorServiceServer is the server API for ReactorService service.
// All implementations must embed UnimplementedReactorServiceServer
// for forward compatibility.
type ReactorServiceServer interface {
	ReactorLoop(*ReactorStart, grpc.ServerStreamingServer[ReactorActivation]) error
	ReactorWork(context.Context, *ReactorUpdate) (*Nothing, error)
	mustEmbedUnimplementedReactorServiceServer()
}

// UnimplementedReactorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReactorServiceServer struct{}

func (UnimplementedReactorServiceServer) ReactorLoop(*ReactorStart, grpc.ServerStreamingServer[ReactorActivation]) error {
	return status.Errorf(codes.Unimplemented, "method ReactorLoop not implemented")
}
func (UnimplementedReactorServiceServer) ReactorWork(context.Context, *ReactorUpdate) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactorWork not implemented")
}
func (UnimplementedReactorServiceServer) mustEmbedUnimplementedReactorServiceServer() {}
func (UnimplementedReactorServiceServer) testEmbeddedByValue()                        {}

// UnsafeReactorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReactorServiceServer will
// result in compilation errors.
type UnsafeReactorServiceServer interface {
	mustEmbedUnimplementedReactorServiceServer()
}

func RegisterReactorServiceServer(s grpc.ServiceRegistrar, srv ReactorServiceServer) {
	// If the following call pancis, it indicates UnimplementedReactorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReactorService_ServiceDesc, srv)
}

func _ReactorService_ReactorLoop_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReactorStart)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReactorServiceServer).ReactorLoop(m, &grpc.GenericServerStream[ReactorStart, ReactorActivation]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReactorService_ReactorLoopServer = grpc.ServerStreamingServer[ReactorActivation]

func _ReactorService_ReactorWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactorUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReactorServiceServer).ReactorWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReactorService_ReactorWork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReactorServiceServer).ReactorWork(ctx, req.(*ReactorUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// ReactorService_ServiceDesc is the grpc.ServiceDesc for ReactorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReactorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ReactorService",
	HandlerType: (*ReactorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReactorWork",
			Handler:    _ReactorService_ReactorWork_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReactorLoop",
			Handler:       _ReactorService_ReactorLoop_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "reactor.proto",
}
